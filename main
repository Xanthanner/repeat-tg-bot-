import os
import random
import json
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# Загружаем конфигурацию
with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

TOKEN = config["TOKEN"]
FULL_ACCESS_IDS = config["FULL_ACCESS_IDS"]

# Конфигурация
MAX_MESSAGES = 10000
MESSAGES_DIR = "D:\\another\\messages"  # Директория для сохранения сообщений
BASE_MESSAGES_FILE = "messages.json"  # Файл с базовыми сообщениями

# Глобальные переменные
bot_enabled = True
base_messages = []  # Общие сообщения (глобальные)
chat_configs = {}  # Уникальные сообщения для чатов

# Настройка логирования
logging.basicConfig(level=logging.INFO)

# Убедиться, что директория для сообщений существует
os.makedirs(MESSAGES_DIR, exist_ok=True)

# Загрузка базы сообщений
def load_base_messages():
    if os.path.exists(BASE_MESSAGES_FILE):
        try:
            with open(BASE_MESSAGES_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            logging.warning("Файл messages.json поврежден. Используем пустую основу.")
    return []

# Загрузка конфигурации чата
def load_chat_config(chat_id):
    config_path = os.path.join(MESSAGES_DIR, f"chat_{chat_id}.json")
    if os.path.exists(config_path):
        try:
            with open(config_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            logging.warning(f"Файл конфигурации для чата {chat_id} поврежден. Создаем пустую.")
    return {"messages": [], "chance": 100, "base_messages": list(base_messages)}

# Сохранение конфигурации чата
def save_chat_config(chat_id, config):
    config_path = os.path.join(MESSAGES_DIR, f"chat_{chat_id}.json")
    with open(config_path, "w", encoding="utf-8") as f:
        json.dump(config, f, ensure_ascii=False, indent=4)

# Проверка прав доступа
def has_access(user_id):
    return user_id in FULL_ACCESS_IDS

# Команда /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if has_access(user_id):
        await update.message.reply_text("Уро! Я готов к работе.")
    else:
        await update.message.reply_text("Ну и нахуй, еблан бля")

# Команда включения/выключения бота
async def bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_enabled
    user_id = update.effective_user.id
    if has_access(user_id):
        bot_enabled = not bot_enabled
        state = "включён" if bot_enabled else "выключен"
        await update.message.reply_text(f"Бот {state}!")
    else:
        await update.message.reply_text("Мамку свою повключай и повыключай. Ей приятно будет?")

# Команда очистки памяти
async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    user_id = update.effective_user.id
    if has_access(user_id):
        # Полностью очищаем все сообщения для данного чата
        chat_configs[chat_id] = {"messages": [], "chance": 100, "base_messages": []}
        save_chat_config(chat_id, chat_configs[chat_id])
        await update.message.reply_text("Память для чата полностью очищена (включая базовые сообщения).")
    else:
        await update.message.reply_text("Лучше бы ты забыл как думать и умер нахуй")

# Команда установки шанса
async def setchance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    user_id = update.effective_user.id
    if has_access(user_id):
        try:
            chance = int(context.args[0])
            if chance < 0:
                raise ValueError("Шанс не может быть меньше 0.")
            if chance > 100:
                chance = 100
            chat_configs[chat_id]["chance"] = chance
            save_chat_config(chat_id, chat_configs[chat_id])
            await update.message.reply_text(f"Шанс для чата установлен на {chance}%.")
        except (IndexError, ValueError):
            await update.message.reply_text("Пожалуйста, укажите корректное значение шанса (0-100). Например: /setchance 50")
    else:
        await update.message.reply_text("Уменьшил бы шанс своего рождения, еблан")

# Команда принудительного повтора сообщения
async def repeat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if chat_id in chat_configs and chat_configs[chat_id]["messages"]:
        all_messages = chat_configs[chat_id]["base_messages"] + chat_configs[chat_id]["messages"]
        random_message = random.choice(all_messages)
        if random_message.get('text'):
            await update.message.reply_text(random_message['text'])
        elif random_message.get('sticker'):
            await update.message.reply_sticker(random_message['sticker'])
        elif random_message.get('animation'):
            await update.message.reply_animation(random_message['animation'])
    else:
        await update.message.reply_text("Сообщений для повтора нет.")

# Обработчик сообщений
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_enabled
    if not bot_enabled:
        return

    chat_id = update.message.chat.id
    user_id = update.message.from_user.id

    # Загружаем конфигурацию чата
    if chat_id not in chat_configs:
        chat_configs[chat_id] = load_chat_config(chat_id)

    # Сохраняем сообщение
    if update.message.text or update.message.sticker or update.message.animation:
        if update.message.text and update.message.text.startswith("/"):
            return

        chat_configs[chat_id]["messages"].append({
            'text': update.message.text,
            'sticker': update.message.sticker.file_id if update.message.sticker else None,
            'animation': update.message.animation.file_id if update.message.animation else None
        })
        if len(chat_configs[chat_id]["messages"]) > MAX_MESSAGES:
            chat_configs[chat_id]["messages"].pop(0)
        save_chat_config(chat_id, chat_configs[chat_id])

    # Шанс отправки случайного сообщения
    if random.randint(1, 100) <= chat_configs[chat_id]["chance"]:
        all_messages = chat_configs[chat_id]["base_messages"] + chat_configs[chat_id]["messages"]
        if all_messages:
            random_message = random.choice(all_messages)
            if random_message.get('text'):
                await update.message.reply_text(random_message['text'])
            elif random_message.get('sticker'):
                await update.message.reply_sticker(random_message['sticker'])
            elif random_message.get('animation'):
                await update.message.reply_animation(random_message['animation'])

# Основной метод запуска
async def main():
    global base_messages
    base_messages = load_base_messages()  # Загружаем общие сообщения при старте бота

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("bot", bot))
    application.add_handler(CommandHandler("clear", clear))
    application.add_handler(CommandHandler("setchance", setchance))
    application.add_handler(CommandHandler("repeat", repeat))
    application.add_handler(MessageHandler(filters.ALL, message_handler))

    await application.run_polling()

# Запуск бота
if __name__ == '__main__':
    try:
        asyncio.get_event_loop().run_until_complete(main())
    except RuntimeError:  # Если цикл уже запущен
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.run(main())
